{"ast":null,"code":"var _jsxFileName = \"/Users/adishbhat/Documents/Projects/BookStore/frontend/src/components/CustomImage.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomImage = ({\n  name\n}) => {\n  const images = {\n    userIcon: {\n      src: \"images/svg/userr.svg\",\n      alt: \"user\"\n    },\n    cartIcon: {\n      src: \"images/svg/cart.svg\",\n      alt: \"cart\"\n    },\n    book2: {\n      src: \"images/book2.jpg\",\n      alt: \"book2\"\n    },\n    bookMainPage: {\n      src: \"images/book3.jpg\",\n      alt: \"Bookimage8\"\n    },\n    searchIcon: {\n      src: \"images/svg/search.png\",\n      alt: \"search\"\n    },\n    facebookIcon: {\n      src: \"images/svg/fb.svg\",\n      alt: \"fb\"\n    },\n    instaIcon: {\n      src: \"images/svg/insta.svg\",\n      alt: \"insta\"\n    },\n    tweetIcon: {\n      src: \"images/svg/tweet.svg\",\n      alt: \"tweet\"\n    },\n    mediumIcon: {\n      src: \"images/svg/medium.svg\",\n      alt: \"medium\"\n    },\n    playIcon: {\n      src: \"images/svg/play.svg\",\n      alt: \"play\"\n    }\n  };\n\n  // Get the corresponding image data based on the 'name' prop\n  const image = images[name];\n\n  // If the 'name' is invalid or not found in the images object, you can return a default image or null\n  if (!image) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Image not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    src: image.src,\n    alt: image.alt\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n// Define the prop types to validate the 'name' prop\n_c = CustomImage;\nCustomImage.propTypes = {\n  name: PropTypes.string.isRequired\n};\nexport default CustomImage;\nvar _c;\n$RefreshReg$(_c, \"CustomImage\");","map":{"version":3,"names":["React","PropTypes","jsxDEV","_jsxDEV","CustomImage","name","images","userIcon","src","alt","cartIcon","book2","bookMainPage","searchIcon","facebookIcon","instaIcon","tweetIcon","mediumIcon","playIcon","image","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","string","isRequired","$RefreshReg$"],"sources":["/Users/adishbhat/Documents/Projects/BookStore/frontend/src/components/CustomImage.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst CustomImage = ({ name }) => {\n  const images = {\n    userIcon: {\n      src: \"images/svg/userr.svg\", \n      alt: \"user\"\n    },\n    cartIcon: {\n      src: \"images/svg/cart.svg\", \n      alt: \"cart\"\n    },\n    book2: {\n      src: \"images/book2.jpg\", \n      alt: \"book2\"\n    },\n    bookMainPage: {\n      src: \"images/book3.jpg\", \n      alt: \"Bookimage8\"\n    },\n    searchIcon: {\n      src: \"images/svg/search.png\", \n      alt: \"search\"\n    },\n    facebookIcon: {\n      src: \"images/svg/fb.svg\", \n      alt: \"fb\"\n    },\n    instaIcon: {\n      src: \"images/svg/insta.svg\", \n      alt: \"insta\"\n    },\n    tweetIcon: {\n      src: \"images/svg/tweet.svg\", \n      alt: \"tweet\"\n    },\n    mediumIcon: {\n      src: \"images/svg/medium.svg\", \n      alt: \"medium\"\n    },\n    playIcon: {\n      src: \"images/svg/play.svg\", \n      alt: \"play\"\n    },\n  };\n\n  // Get the corresponding image data based on the 'name' prop\n  const image = images[name];\n\n  // If the 'name' is invalid or not found in the images object, you can return a default image or null\n  if (!image) {\n    return <p>Image not found</p>;\n  }\n\n  return (\n    <img src={image.src} alt={image.alt} />\n  );\n};\n\n// Define the prop types to validate the 'name' prop\nCustomImage.propTypes = {\n  name: PropTypes.string.isRequired\n};\n\nexport default CustomImage;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAChC,MAAMC,MAAM,GAAG;IACbC,QAAQ,EAAE;MACRC,GAAG,EAAE,sBAAsB;MAC3BC,GAAG,EAAE;IACP,CAAC;IACDC,QAAQ,EAAE;MACRF,GAAG,EAAE,qBAAqB;MAC1BC,GAAG,EAAE;IACP,CAAC;IACDE,KAAK,EAAE;MACLH,GAAG,EAAE,kBAAkB;MACvBC,GAAG,EAAE;IACP,CAAC;IACDG,YAAY,EAAE;MACZJ,GAAG,EAAE,kBAAkB;MACvBC,GAAG,EAAE;IACP,CAAC;IACDI,UAAU,EAAE;MACVL,GAAG,EAAE,uBAAuB;MAC5BC,GAAG,EAAE;IACP,CAAC;IACDK,YAAY,EAAE;MACZN,GAAG,EAAE,mBAAmB;MACxBC,GAAG,EAAE;IACP,CAAC;IACDM,SAAS,EAAE;MACTP,GAAG,EAAE,sBAAsB;MAC3BC,GAAG,EAAE;IACP,CAAC;IACDO,SAAS,EAAE;MACTR,GAAG,EAAE,sBAAsB;MAC3BC,GAAG,EAAE;IACP,CAAC;IACDQ,UAAU,EAAE;MACVT,GAAG,EAAE,uBAAuB;MAC5BC,GAAG,EAAE;IACP,CAAC;IACDS,QAAQ,EAAE;MACRV,GAAG,EAAE,qBAAqB;MAC1BC,GAAG,EAAE;IACP;EACF,CAAC;;EAED;EACA,MAAMU,KAAK,GAAGb,MAAM,CAACD,IAAI,CAAC;;EAE1B;EACA,IAAI,CAACc,KAAK,EAAE;IACV,oBAAOhB,OAAA;MAAAiB,QAAA,EAAG;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC/B;EAEA,oBACErB,OAAA;IAAKK,GAAG,EAAEW,KAAK,CAACX,GAAI;IAACC,GAAG,EAAEU,KAAK,CAACV;EAAI;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAE3C,CAAC;;AAED;AAAAC,EAAA,GAzDMrB,WAAW;AA0DjBA,WAAW,CAACsB,SAAS,GAAG;EACtBrB,IAAI,EAAEJ,SAAS,CAAC0B,MAAM,CAACC;AACzB,CAAC;AAED,eAAexB,WAAW;AAAC,IAAAqB,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}